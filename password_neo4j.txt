S2RO6DPey4VKT_lJ1F5aC6AFAuXsVGtRUmCFHJgF5Xo

Content-base

MATCH(f1:Films{id: 3})-[fc1:HAS_CATEGORY]->(c:Categories)<-[fc2:HAS_CATEGORY]-(f2:Films)
                    WITH f1, f2, COUNT(c) AS intersection
                    MATCH (f1)-[:HAS_CATEGORY]->(sc:Categories)
                    WITH f1, f2, intersection, COLLECT(sc.id) AS s1
                    MATCH (u:Users)-[r:RATED]->(f2)-[:HAS_CATEGORY]->(zc:Categories)
                    WITH f1, f2, s1, intersection, COLLECT(zc.id) AS s2, collect(r) as ratings
                    WITH f1, f2, intersection, s1+[x IN s2 WHERE NOT x IN s1] AS union, s1, s2, toFloat(REDUCE(s=0,i in ratings | s+i.rating) / SIZE(ratings)) as recommendation
                    RETURN f2, ((1.0*intersection)/SIZE(union)) AS jaccard, recommendation
                    ORDER BY jaccard DESC, recommendation DESC, toFloat(f2.year) DESC
                    LIMIT 10

Collarative-filtering

MATCH (c1:Users {username:'sigmund.dare'})-[r1:RATED]->(f:Films)<-[r2:RATED]-(c2:Users)
WITH
	SUM(r1.rating*r2.rating) as dot_product,
	SQRT( REDUCE(x=0.0, a IN COLLECT(r1.rating) | x + a^2) ) as r1_length,
	SQRT( REDUCE(y=0.0, b IN COLLECT(r2.rating) | y + b^2) ) as r2_length,
	c1,c2
MERGE (c1)-[s:SIMILARITY]-(c2)
SET s.similarity = dot_product / (r1_length * r2_length)
WITH 1 as neighbours
MATCH (c1)-[:SIMILARITY]->(c2)-[r:RATED]->(f2:Films)
WHERE NOT (c1)-[:RATED]->(f2)
WITH f2, collect(r) as ratings ,collect(c2) as users, c1
WITH f2, users, REDUCE(s=0,i in ratings | s+i.rating) / SIZE(ratings) as recommendation, c1
RETURN f2, recommendation 
ORDER BY recommendation DESC
LIMIT 10
